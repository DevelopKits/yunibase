# BuildMgr

macro(init_recipe)
    # Recipe registry for primary rules
    set(__yunibase_buildmgr_recipes "" CACHE STRING "" FORCE)
    mark_as_advanced(__yunibase_buildmgr_recipes)
    set(__yunibase_buildmgr_activated_recipes "" CACHE STRING "" FORCE)
    mark_as_advanced(__yunibase_buildmgr_activated_recipes)
endmacro()

macro(yunibase_recipe_establish_depends first next)
    add_dependencies(${first} ${next})
    if(NOT "${ARGN}" STREQUAL "")
        yunibase_recipe_establish_depends(${next} ${ARGN})
    endif()
endmacro()

macro(register_recipe nam flav)
    set(_recipes ${ARGN})
    list(REVERSE _recipes)
    list(GET _recipes 0 _first)
    list(LENGTH _recipes _cnt)
    if(NOT ${_cnt} EQUAL 1)
        yunibase_recipe_establish_depends(${_recipes})
    endif()
    list(APPEND __yunibase_buildmgr_recipes "${nam}_${flav}:${_first}")
    set(__yunibase_buildmgr_recipelist_${_first} ${_recipes})
    # Generate loglist
    set(_logtop ${YUNIBASE_BUILD_REPORT_PREFIX}/recipe_${nam}_${flav}.cmake)
    file(WRITE ${_logtop}
        "# Top for ${nam} ${flav}\n")
    file(WRITE ${_logtop}
        "set(recipelogprefix_${nam}_${flav} ${_recipes})\n")
    foreach(e ${_recipes})
        file(APPEND ${_logtop}
            "include(${YUNIBASE_BUILD_REPORT_PREFIX}/${e}.cmake OPTIONAL)\n")
    endforeach()
endmacro()

function(init_config_directory)
    if(EXISTS ${YUNIBASE_BUILD_CONFIG_PREFIX})
        if(EXISTS ${YUNIBASE_BUILD_CONFIG_PREFIX}/configured_by_me)
            file(REMOVE_RECURSE ${YUNIBASE_BUILD_CONFIG_PREFIX})
        endif()
    endif()
    if(EXISTS ${YUNIBASE_BUILD_REPORT_PREFIX})
        file(REMOVE_RECURSE ${YUNIBASE_BUILD_REPORT_PREFIX})
    endif()
endfunction()

set(yunibase___step_options
    IGNORE_TEST_FAILURE
    SKIP_BOOTSTRAP
    BOOTSTRAP_ONLY
    SKIP_TEST)

function(yunibase_recipe_configure1 tgt opts)
    set(dir ${YUNIBASE_BUILD_CONFIG_PREFIX}/${tgt})
    set(rdir ${YUNIBASE_BUILD_REPORT_PREFIX}/${tgt})
    set(pth ${dir}/config.cmake)
    file(MAKE_DIRECTORY ${dir})
    file(WRITE ${YUNIBASE_BUILD_CONFIG_PREFIX}/configured_by_me "blah")
    if(EXISTS ${pth})
        message(FATAL_ERROR "Duplicate options?? (${pth})")
    endif()
    # Header
    file(WRITE ${pth} "# Autogenerated. Do not edit.\n\n")
    # Write options
    foreach(e ${yunibase___step_options})
        if("${opts}" MATCHES ${e})
            file(APPEND ${pth} "set(${e} TRUE)\n")
        else()
            file(APPEND ${pth} "set(${e} FALSE)\n")
        endif()
    endforeach()
    message(STATUS "Recipe config(${tgt}): ${opts}")
endfunction()

function(yunibase_recipe_configure tgt opts)
    foreach(e ${__yunibase_buildmgr_recipelist_${tgt}})
        yunibase_recipe_configure1(${e} "${opts}")
    endforeach()
endfunction()

macro(yunibase___set_recipe_state nam flav state)
    foreach(e ${__yunibase_buildmgr_recipes})
        if(${e} MATCHES "${nam}_${flav}:(.*)")
            if(${state})
                message(FATAL_ERROR "Legacy")
            else()
                message(STATUS "Activate: ${e}")
                list(APPEND __yunibase_buildmgr_activated_recipes "${e}")
            endif()
            set(_tgt ${CMAKE_MATCH_1})
            set_target_properties(${_tgt}
                PROPERTIES
                EXCLUDE_FROM_ALL
                ${state})
            # Check options validity
            foreach(e ${ARGN})
                if(NOT "${yunibase___step_options}" MATCHES ${e})
                    message(FATAL_ERROR "Unknown recipe option: ${e}")
                endif()
            endforeach()
            yunibase_recipe_configure(${_tgt} "${ARGN}")
            break()
        endif()
    endforeach()
endmacro()

function(toggle_recipe_only1 nam state)
    foreach(e ${__yunibase_buildmgr_activated_recipes})
        if(${e} MATCHES "${nam}:(.*)")
            if(${state} STREQUAL FALSE)
                message(STATUS "enable: ${e}")
            else()
                message(STATUS "disable: ${e}")
            endif()
            set(_tgt ${CMAKE_MATCH_1})
            set_target_properties(${_tgt}
                PROPERTIES
                EXCLUDE_FROM_ALL
                ${state})
            break()
        endif()
    endforeach()
endfunction()

macro(check_target_name var nam) # Only for enabled target
    foreach(e ${__yunibase_buildmgr_activated_recipes})
        if(${e} MATCHES "${nam}:(.*)")
            # In ALL target?
            set(_tgt ${CMAKE_MATCH_1})
            get_target_property(_exclude ${_tgt}
                EXCLUDE_FROM_ALL)
            if(_exclude)
                set(${var} FALSE)
            else()
                set(${var} ${_tgt})
            endif()
            break()
        endif()
    endforeach()
endmacro()

function(add_buildmgr_report)
    set(_total ${CMAKE_CURRENT_BINARY_DIR}/report_total.cmake)
    file(WRITE ${_total} "# Include every activated recipe logs\n")
    file(APPEND ${_total} "set(recipelogprefixes)\n")
    add_custom_target(buildmgr_report ALL
        COMMAND ${CMAKE_COMMAND} 
        -DTOTAL=${_total}
        -DREPORT=${CMAKE_CURRENT_BINARY_DIR}/report.cmake
        -P ${YUNIBASE_ROOT}/cmake/YunibaseRecipeLogGen.cmake)

    foreach(e ${__yunibase_buildmgr_recipes})
        if(${e} MATCHES "([^:]*):(.*)")
            set(nam ${CMAKE_MATCH_1})
            check_target_name(tgt ${nam})
            if(tgt)
                add_dependencies(buildmgr_report ${tgt})
                file(APPEND ${_total}
                    "list(APPEND recipelogprefixes ${nam})\n")
                file(APPEND ${_total}
                    "include(\"${YUNIBASE_BUILD_REPORT_PREFIX}/recipe_${nam}.cmake\")\n")
            endif()
        endif()
    endforeach()
endfunction()

function(enable_recipe_only1 nam)
    toggle_recipe_only1(${nam} FALSE)
endfunction()

function(disable_recipe_only1 nam)
    toggle_recipe_only1(${nam} TRUE)
endfunction()

function(enable_recipe_only)
    # First, disable every enabled recipes first
    foreach(e ${__yunibase_buildmgr_recipes})
        if(${e} MATCHES "([^:]*):(.*)")
            set(tgt ${CMAKE_MATCH_1})
            disable_recipe_only1(${tgt})
        endif()
    endforeach()

    # Enable back specified recipes
    foreach(e ${ARGN})
        enable_recipe_only1(${e})
        enable_recipe_only1(${e}_STABLE)
        enable_recipe_only1(${e}_CURRENT)
    endforeach()
endfunction()

function(disable_recipe_only)
    foreach(e ${ARGN})
        disable_recipe_only1(${e})
        disable_recipe_only1(${e}_STABLE)
        disable_recipe_only1(${e}_CURRENT)
    endforeach()
endfunction()

macro(activate_recipe nam flav)
    detect_source(_src ${nam} ${flav})
    if(_src)
        yunibase___set_recipe_state(${nam} ${flav} FALSE ${ARGN})
    else()
        message(STATUS "${nam} ${flav} was not found. Disabled.")
    endif()
endmacro()

